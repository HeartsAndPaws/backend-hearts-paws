// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        String   @id @default(uuid())
  nombre    String
  email     String   @unique
  contrasena  String?
  telefono  String?
  direccion String?
  ciudad    String?
  pais      String?
  imagenPerfil String?
  rol       Rol      @default(USUARIO)
  creado_en DateTime @default(now())

  externalId   String?  @unique 

  // Relaciones
  donaciones Donacion[]
  adopciones Adopcion[]
  chats      Chat[]     @relation("UsuarioChats")
  mensajes   Mensaje[]  @relation("UsuarioMensajes")
}

model Organizacion {
  id          String   @id @default(uuid())
  nombre      String
  email       String   @unique
  contrasena  String
  descripcion String?
  telefono    String?
  direccion   String?
  ciudad      String?
  pais        String?
  imagenPerfil String?
  archivoVerificacionUrl String? 
  plan        Plan     @default(GRATUITO)
  creado_en   DateTime @default(now())
  estado      EstadoOrganizacion @default(PENDIENTE) 

  mascotas   Mascota[]
  chats      Chat[]     @relation("OrganizacionChats")
  donaciones Donacion[]
  casos Caso[]
  adopciones Adopcion[]
  mensajes     Mensaje[]    @relation("OrgMensajes")
}

model Mascota {
  id             String         @id @default(uuid())
  nombre         String
  edad           Int
  descripcion    String?
  creada_en      DateTime       @default(now())

  organizacion   Organizacion   @relation(fields: [organizacionId], references: [id])
  organizacionId String

  tipo           TiposMascota   @relation(fields: [tipoId], references: [id])
  tipoId         String

  imagenes       imagenMascota[]
  casos          Caso[]
  donaciones     Donacion[]
  adopciones     Adopcion[]
}

model imagenMascota {
  id        String   @id @default(uuid())
  url       String
  mascota   Mascota  @relation(fields: [mascotaId], references: [id])
  mascotaId String
  subida_en DateTime @default(now())
}

model TiposMascota {
  id      String    @id @default(uuid())
  nombre  String    @unique
  mascotas Mascota[]
}

model Caso {
  id          String         @id @default(uuid())
  titulo      String
  descripcion String
  tipo        TipoCaso
  mascota     Mascota        @relation(fields: [mascotaId], references: [id])
  mascotaId   String
  ong         Organizacion?  @relation(fields: [ongId], references: [id])
  ongId       String?

  // Relaciones con subtipos
  adopcion    CasoAdopcion?
  donacion    CasoDonacion?
}

model CasoAdopcion {
  id           String   @id @default(uuid())
  caso         Caso     @relation(fields: [casoId], references: [id])
  casoId       String   @unique
  estado       EstadoAdopcion @default(PENDIENTE)

}

model CasoDonacion {
  id            String   @id @default(uuid())
  caso          Caso     @relation(fields: [casoId], references: [id])
  casoId        String   @unique
  estadoDonacion Float   // Monto recaudado hasta el momento
  metaDonacion   Float   // Meta de la donación

  // Relacion inversa
  donaciones    Donacion[]  @relation("DonacionesPorCaso")
  estado        EstadoCasoDonacion  @default(ACTIVO)
}

enum TipoCaso {
  ADOPCION
  DONACION
}



model Donacion {
  id             String       @id @default(uuid())
  usuario        Usuario      @relation(fields: [usuarioId], references: [id])
  usuarioId      String
  mascota        Mascota?     @relation(fields: [mascotaId], references: [id])
  mascotaId      String?
  organizacion   Organizacion @relation(fields: [organizacionId], references: [id])
  organizacionId String

  monto          Float
  comprobante    String? // URL al archivo o imagen
  fecha          DateTime     @default(now())

  // Para integrar Stripe
  estadoPago     String?
  stripeSessionId   String? 
  referenciaPago   String?

  // Relación al caso especifico
  casoDonacionId  String?
  casoDonacion  CasoDonacion?   @relation("DonacionesPorCaso", fields: [casoDonacionId], references: [id])
 
}

model Adopcion {
  id                String         @id @default(uuid())
  usuario           Usuario        @relation(fields: [usuarioId], references: [id])
  usuarioId         String
  mascota           Mascota        @relation(fields: [mascotaId], references: [id])
  mascotaId         String
  estado            EstadoAdopcion @default(PENDIENTE)
  fechaSolicitud    DateTime       @default(now())
  fechaConfirmacion DateTime?

  organizacion   Organizacion @relation(fields: [organizacionId], references: [id])
  organizacionId String
}

model Chat {
  id             String       @id @default(uuid())
  usuario        Usuario      @relation("UsuarioChats", fields: [usuarioId], references: [id])
  usuarioId      String
  organizacion   Organizacion @relation("OrganizacionChats", fields: [organizacionId], references: [id])
  organizacionId String
  mensajes       Mensaje[]
  creado_en      DateTime     @default(now())
}

model Mensaje {
  id         String   @id @default(uuid())
  chat       Chat     @relation(fields: [chatId], references: [id])
  chatId     String
  autorUsuario           Usuario?      @relation("UsuarioMensajes", fields: [autorUsuarioId], references: [id])
  autorUsuarioId         String?
  autorOrganizacion      Organizacion? @relation("OrgMensajes", fields: [autorOrganizacionId], references: [id])
  autorOrganizacionId    String?
  contenido  String
  enviado_en DateTime @default(now())
}

enum Rol {
  USUARIO
  ADMIN
}

enum EstadoAdopcion {
  PENDIENTE
  ACEPTADA
  RECHAZADA
}

enum Plan {
  GRATUITO
  PREMIUM
}

enum EstadoOrganizacion {
  PENDIENTE
  APROBADA
  RECHAZADA
}

enum EstadoPago {
  PENDIENTE
  COMPLETADO
  FALLIDO
}

enum EstadoCasoDonacion {
  ACTIVO
  COMPLETADO
}